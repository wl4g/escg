# Copyright (c) 2017 ~ 2025, the original author wangl.sir individual Inc,
# All rights reserved. Contact us <Wanglsir@gmail.com, 983708408@qq.com>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# #### Iam Gateway Example Discovery configuration. ####
#
spring:
  redis:
    cluster:
      nodes: ${ISCG_REDIS_NODES:localhost:6379,localhost:6380,localhost:6381,localhost:7379,localhost:7380,localhost:7381}
    timeout: 10000ms
    password: ${ISCG_REDIS_PASSWORD:zzx!@#$%}
    lettuce:
      pool:
        max-active: 10
        max-wait: -1ms
  cloud:
    ## Notice: This is the source code class of module 'spring-cloud-kubernetes-discovery' (of the discovery client sdk). 
    ## see:org.springframework.cloud.kubernetes.discovery.KubernetesDiscoveryClientAutoConfiguration
    ##
    ## Notice: This is the source code class of module 'spring-cloud-kubernetes-client-discovery' (of the based on k8s discovery proxy server). 
    ## see:org.springframework.cloud.kubernetes.client.discovery.KubernetesDiscoveryClientAutoConfiguration
    ## see:org.springframework.cloud.kubernetes.client.discovery.KubernetesInformerDiscoveryClient
    kubernetes:
      discovery:
        ## see:org.springframework.cloud.kubernetes.client.discovery.ConditionalOnKubernetesDiscoveryEnabled
        enabled: true ## Default by true
        ## If discovering all namespaces.
        allNamespaces: false
        ## If wait for the discovery cache (service and endpoints) to be fully loaded, otherwise aborts the application on starting.
        waitCacheReady: true
        ## Timeout for initializing discovery cache, will abort the application if exceeded.
        cacheLoadingTimeoutSeconds: 60
        ## If endpoint addresses not marked 'ready' by the k8s api server should be discovered.
        includeNotReadyAddresses: false
        ## SpEL expression to filter services AFTER they have been retrieved from the Kubernetes API server.
        #filter: ""
        ## Set the port numbers that are considered secure and use HTTPS.
        knownSecurePorts: [443, 8443]
        ## If set, then only the services matching these labels will be fetched from the Kubernetes API server.
        serviceLabels: {}
        ## If set then the port with a given name is used as primary when multiple ports are defined for a service.
        #primaryPortName:
        metadata:
          ## When set, the Kubernetes labels of the services will be included as metadata of the returned ServiceInstance.
          addLabels: true ## Default by true
          ## When addLabels is set, then this will be used as a prefix to the key names in the metadata map.
          #labelsPrefix:
          ## When set, the Kubernetes annotations of the services will be included as metadata of the returned ServiceInstance.
          addAnnotations: true ## Default by true
          ## When addAnnotations is set, then this will be used as a prefix to the key names in the metadata map.
          #annotationsPrefix:
          ## When set, any named Kubernetes service ports will be included as metadata of the returned ServiceInstance.
          addPorts: true ## Default by true
          ## When addPorts is set, then this will be used as a prefix to the key names in the metadata map.
          portsPrefix: "port."
      ## see:org.springframework.cloud.kubernetes.commons.KubernetesClientProperties
      ## see:io.kubernetes.client.util.Config
      client:
        #namespace:
        connectionTimeout: 10_000
        requestTimeout: 60_000
        rollingTimeout: 60_000
      ## see:org.springframework.cloud.kubernetes.commons.leader.LeaderProperties
      #leader:
      #  enabled: true ## Default by true
      ## see:org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties
      #reload:
      #  enabled: true
      #  strategy: restart_context
      #  mode: polling
    ## see;org.springframework.cloud.client.ConditionalOnDiscoveryEnabled
    discovery:
      enabled: true ## Default by true
      client:
        ## see:org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClient
        simple:
          instances:
            default-fallback-service:
              - instanceId: default-fallback-service
                uri: http://localhost:${server.port}/_fallback
                metadata: {}

            productpage-service:
              - instanceId: n1.v1-productpage-service:8001
                #uri: http://localhost:8001
                uri: http://httpbin.org/post
                metadata:
                  Escg-Canary-Label-Header: v1-canary-header
                  Escg-Canary-Label-Query: v1-canary-query

              - instanceId: n2.v1-productpage-service:8001
                #uri: http://localhost:8001
                uri: http://httpbin.org/post
                metadata:
                  Escg-Canary-Label-Header: v1-canary-header
                  Escg-Canary-Label-Query: v1-canary-query

            details-service:
              - instanceId: n1.v1-details-service:8002
                #uri: http://localhost:8002
                uri: https://httpbin.org/post
                metadata:
                  Escg-Canary-Label-Header: v1-canary-header
                  Escg-Canary-Label-Query: v1-canary-query

              - instanceId: n2.v1-details-service:8002
                #uri: http://localhost:8002
                uri: https://httpbin.org/post
                metadata:
                  Escg-Canary-Label-Header: v1-canary-header
                  Escg-Canary-Label-Query: v1-canary-query

            ratings-service:
              - instanceId: n1.v1-ratings-service:8003
                #uri: https://localhost:8003
                uri: https://httpbin.org/post
                metadata:
                  Escg-Canary-Label-Header: v1-canary-header
                  Escg-Canary-Label-Query: v1-canary-query

              - instanceId: n2.v1-ratings-service:8003
                #uri: https://localhost:8003
                uri: https://httpbin.org/post
                metadata:
                  Escg-Canary-Label-Header: v1-canary-header
                  Escg-Canary-Label-Query: v1-canary-query

              - instanceId: n3.v2-ratings-service:8003
                #uri: https://localhost:8003
                uri: https://httpbin.org/post
                metadata:
                  Escg-Canary-Label-Header: v2-canary-header
                  Escg-Canary-Label-Query: v2-canary-query
